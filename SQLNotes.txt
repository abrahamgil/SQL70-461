SQL Diagram
	Make sure it has an owner
	Can manipulate and even add tables/data from there
	
What are Objects?
	Tables, Stored Procedures, Indexes, Views etc. All are object.
	Structure that is used to create specific instances of the object. Each object has properties

Understanding Tables
	Tables are used to store data
	Tables have specific number of columns
		each column stores a certain type of data
	Table can have an almost unlimited number of rows
		space, manageability, organization, etc

Understanding Data Integrity
	Correctness, Consistency, and uniqueness of data stored in a tables/data
	Make sure we don't store duplicate
	Data Integrity is handled:
		Row Level
			Primary Key
		Column Level
			Data Types
			Constraints

Understanding Data Types
	Use the correct type of data for the designated column
	also prevents garbage data 
	more than 30 data types in SQL Server 2012 (categories following)
		Exact numeric
		Approximate numeric
		Date and time
		character strings
		unicode character strings
		Binary Strings
		Other Data types

Understanding Primary Keys
	Used to insure that none of the rows are duplicates
	You can place primary keys on 2 columns
	
Understanding Constraints
	a Data type that has more knobs we can control. (Supercharged data type)
	4 of them
		Primary Key
			uniquely identifies each row in a tables
		Foreign keys
			Establishes and enforces a link between the data in two table to control data that can be stored in the foreign key tables
			Usually tied to the Primary key
		Check 
			limits the values that are accepted by one or more columns
			multiple CHECK constraints can be applied to a single column
		Unique
			Make sure that no duplicate values are entered in specific columns that do not participate in a primary key (usernames)

Understand NULL
	NULL does NOT mean
		Zero
		Empty
		Space
	NULL means one thing
		Unknown
	How do we dill with this NULL in a query
		We can't run a select WHERE level=NULL
		We can run a SELECT statement WHERE Level IS NULL (or IS NOT NULL)

Understanding View
	Provides predetermined data of table	
	provides ability to query from a table but only from specified columns
	
Understanding Stored Procedures
	SQL version of a subroutine
		write collection of code
		give code a name
		code and execute
	Advantages
		Stored procedure is an object
			so we can give permission and execute
		Functionality is centralized and consistent
			code changes happen in one place
		Stored procedures run more efficiently than standard queries

Understanding Triggers
	Stored procedure that executes automatically
		Whenever an update delete or insert executes the stored procedure
	
Understanding Synonyms
	an alternative name for a database object
		object can exist on a local or remote server
	Advantage - Simplifies object naming especially on remote servers and provides a layer of abstraction that protects a client application from changes made to the name or location of the base object
	
Changing A Table
	Using ALTER TABLE command
		Add or Drop columns
		Add or drop constraints
		reassign partitions
		disable or enable constraints and triggers
	When using designer and attempting to move columns around on table you will not succeed unless "Prevent saving changes that require table re-creation" is disabled (See DesignerModification.PNG)
		When you do this the table is actually being dropped and then recreated with all the data

Deleting a Table
	You don't delete you drop
	Use DROP TABLE command and when you do
		All data is removed
		All indexes, triggers and constraints are removed
		All permissions specifications for the table are removed
		Views and Stored procedures referencing table are not dropped
			Execute the sys.dm_sql_referencing_entities dynamic management function to find which views and stored procedures reference the table you are dropping
			You can also view dependencies by right clicking on the table and click on "View Dependencies (See ViewDependencies.PNG)"
			
Creating a Primary Key
	Can be created when creating a table or do it later
	PK name will be given a random name if you don't assign one (see PKNaming.PNG)

Four Query Types
	Select - Retrieve rows from table
	Insert - Adds one or more rows to a table or view
	Update - Changes existing data in one or more rows in a table or view
	Delete - Removes one or more rows front table or view
	
Logical query processing steps	
	SELECT
	FROM
	WHERE
	GROUP BY
	HAVING 
	ORDER BY

SQL Server Engine (Order of Operations)
	FROM
	WHERE
	GROUP BY
	HAVING
	SELECT
	ORDER BY

Query Optimization
	The Query Optimizer:
		Parsing - Parsed for syntax, object existence, permissions, etc
		Generate execution plans - Different ways to produce the result set are created
		Cost assessment of plans
		Query execution and plan caching - the chosen plan is executed and cached for later use
		
Basic Query Best Practices
	Don't use SELECT * in a production environment
	Avoid unnecessary columns in the SELECT list
	Avoid unnecessary tables in joins
	Avoid using OR if possible
	Avoid using NOT if possible
	Use SCHEMA.TABLE naming in your queries
	Always include a WHERE clause if possible

Comments
	Two types
		-- (double hyphens): CTRL+K+C and CTRL+K+U
		/*...*/ (foward slash asterisk pair)
	Comments don't affect the processor 

USE Command
	Makes sure that you are on the correct DB
	Using this makes queries a bit faster (personal testing)
	
GO Command
	Send it to the processor, close it, and go on to the next command

SELECT Basics
	Select tells DB I want to retrieve data from tables, columns, and conditions to data we want to receive
	Main Clauses:
		SELECT - Specifies the columns returned
		FROM - Tables, Views, Derived Tables, and Joined Tables
		WHERE - Search Condition
		GROUP BY - Groups a selected set of rows into a summary and one row returned for each group
		HAVING - Specifies a search condition for a group
		ORDER BY - Determines the order of the result set, default will returns based on clustered index and how sql server engine brings back the data. Best practice to always use it.
	
WHERE Clauses
	Should always be included
	defines condition to be met for the rows to be returned
	**times where indexing + WHERE clause can slow down ridiculously
	Operators
		=
		<>
		>
		<
		>=
		BETWEEN
		LIKE

Using TOP to Limit Rows
	TOP PERCENT
	WITH TIES
		ORDER BY Required
	By default TOP 1000 rows
		changes on Tools > Options
		
ORDER BY
	Ascending or Descending order
	Ascending order is default
	NULLs are treated as the lowest possible values
	OFFSET and FETCH can be used to control the number of rows returned
		Useful for Paging

NULLs
	Cannot be considered equal to anything
	ISNULL
	ISNOT NULL

Concatenation
	See Concatenation.sql
	
Distinct
	Prevents the retrieval of duplicate items
		Returns the first instance of a value and ignores all future occurrences of that value
		Can be used with AVG and SUM functions

SUM
	Aggregate function

AVG - Averages of all values returned by the query and ignores NULL values

COUNT - Number of occurrences of values returned by the query

Using GROUP BY
	Groups a selected set of rows into a set of summary rows
	one row is returned for each group
	every column that is not part of the GROUP BY clause must be using an aggregate function

HAVING
	It's like a WHERE clause for the GROUP BY clause
	
SELECT INTO
	Creates a new table in the default filegroup and inserts the resulting rows from query 

LIKE and IN
	LIKE
		TSQL Wildcard with like and in on WHERE to find something similar 
		% - Any string of zero or more characters
		_ Any single character
		[] Any single character within the specified range
			[a-f] [abdf]
		^ not
	IN
		Determines whether a specified value matches any value in WHERE clause
		
UNION
	Combines the results of 2 or more queries into a single result set
	All rows will be in the union
	By dqfault duplicates will be removed
	ALL keyword will show duplicates
	Query Optimizer dumps the last select data
	
INTERSECT and EXCEPT
	Intersect - Common to both tables, Distinct values that are returned by the queires on both left and right side
	Except - Not common to both values returns distinct values that are found in the left query that are not found in the right query
	
Synonyms
	Provide alternate names for DB objects
	Abstraction - Re-pointing the name of the Synonym to other tables if table names are changed easily
	
OFFSET FETCH
	Similar to TOP
	Used after ORDER BY
	Limits the number of rows returned
	Skips Rows
	Useful for creating results paging

RANKING
	Windows functionality T-SQL specific
	Data Analysis functionality
	Ranking Functions return a ranking value for each row and result can be divided into partitions
		Each partition has its own values
	4 Ranking Functions
		RANK: Returns the rank of each row within the partition of a result set. 2 or more tied get the same rank
		DENSE-RANK: Returns the rank of rows within the partition of a result set without any gaps in the ranking (can show ties )
		NTILE: Distributes returned rows into a specified number of groups
			EX: NTILE(4) with 40 Rows - returns result set divided into 4 groups of 10 rows
		ROW_NUMBER: Returns sequential number of rows within a partition of a result set starting at 1 for the first row in each partition

JOINS
	Retrieves data from more than 1 table
	Gets data via normalization 
	Types:
		Inner
		Outer
			Left
			Right
			Full
		Cross
		